find.package("devtools")
library(devtools)
find_rtools()
TRUE
install.package("KernSmooth")
install.packages("KernSmooth")
load("KernSmooth")
library(KernSmooth)
Hello, fellows :-)
install.package("swirl")
library("swirl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x=5+7
x <- 5 + 7
x
y <- x-3
y
c(1.1, 9, 3.14)
z = c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
sqrt(z-1)
my_sqrt = sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
mytest2.R <- file.rename("mytest.R")
?file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
?file.path
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2"), recursive = TRUE, file.path("testdir3")
)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink('testdir2')
unlink('testdir2', recursive = TRUE)
?setwd
getwd()
setwd(old.dir)
unlink('testdir', recursive = TRUE)
1:20
pi:10
15:1
`:`
?`:`
seq(1, 20)
?seq
seq(0, 10, 0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, time = 40)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0,1,2), each = 10)
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Austin")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data < sample(c(y, z), 100)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[300]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
name(vect2 <- c(11, 2, NA))
names(vect2 <- c(11, 2, NA))
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
x = c("a", "b", "c")
as.complex(x)
x = c(a, b, c)
a = 1
b = 2
c = 3
x = c(a, b, c)
as.complex(x)
x = c("a", "b", "c")
as.complex(x)
x
add2 <- function(x, y) {
x + y
}
add2(2, 2)
bove <- function(x, n) {
use <- x > n
x[use]
}
above <- function(x, n) {
use <- x > n
x[use]
}
View(bove)
View(bove)
View(bove)
View(bove)
View(bove)
x = 1:20
above(x, 5)
columnMean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for (i, in 1:nc) {
means <- mean(y[, i])
}
means
}
columnMean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc) {
means <- mean(y[, i])
}
means
}
args(lm)
args(columnMean)
y <- 10
f <- function(x) {
y <- 2
y^2 = g(x)
}
g <- function(x) {
x*y
}
f(3)
f <- function(x) {
y <- 2
y^2 + g(x)
}
f(3)
swirl()
library(swirl)
ls()
rm(list = ls())
ls()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
library(swirl)
swirl()
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(7)
ints > 7
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
Sys.Date()
mean(c(2, 4, 5))
swirl()
ls()
swirl()
swirl()
Sys.Date()
mean(c(2, 4, 5))
rm(ls())
rm(ints)
ls()
swirl()
Sys.Date()
mean(c(2, 4, 5))
swirl()
swirl
swirl()
library(swirl)
swirl()
swirl()
Sys.Date()
mean(c(2, 4, 5))
library(swirl)
swirl()
dl <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
?unclass
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
strptime()
args(strptime)
strptime
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints < 7)
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flag$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem elem[2])
lapply(unique_vals, function(elem) elem[2])
library(datasets)
data("iris")
rm(list  = ls())
library(datasets)
data("iris")
head(iris)
iris
virSub = iris[101:150, ]
virSub
mean(virSub$Sepal.Length)
lapply(virSub$Sepal.Length, mean)
sapply(virSub$Sepal.Length, mean)
apply(iris[, 1:4], 2, mean)
args(apply)
apply(iris[101:150, ], 2, mean)
apply(iris[, 1], 2, mean)
apply(iris[, 1:1], 2, mean)
apply(iris[, 1:4], 1, mean)
args(apply)
?apply
apply(iris[101:150, ], 1, mean)
?which
apply(iris[, 101:150], 1, mean)
data(mtcars)
?mtcars
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
?split
split(iris[101:150, ], iris$Sepal.Length)
iris$virginica
split(mtcars$cyl, mtcars$mpg)
mean(split(mtcars$cyl, mtcars$mpg))
split(mtcars$cyl, mtcars$mpg)
sapply(split(mtcars$cyl, mtcars$mpg), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
split(iris, iris$Species)
mean(split(iris[, 1:3], iris$Species))
sapply(split(mtcars$hp, mtcars$cyl))
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
debug(ls)
n
next
getwd()
setwd("/Austin/Data Science/workspace")
setwd("Austin/Data Science/workspace")
getwd()
source(makeVector)
source("makeVector.R")
makeVector(1:20)
args(rnorm)
makeVector(rnorm(100))
environment
?environment
?numeric
source("cachemean.R")
cachemean()
cachemean(rnorm(100))
?getmean
?inverse
args(solve)
?get
source(makecachematrix)
source('cachematrix.R')
source("cachematrix.R")
setwd("ProgrammingAssignment2")
source("cachematrix.R")
makeCacheMatrix
x <- matrix(data = 1:4, nrow = 4, ncol = 4)
x
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(x, makeCacheMatrix)
<<-
?<<-
?is.null
